From g.wraith@sussex.ac.uk (Gavin Wraith) Thu Dec  1 09:54:36 1994
Path: doc.ic.ac.uk!sunsite.doc.ic.ac.uk!uknet!acorn!not-for-mail
From: g.wraith@sussex.ac.uk (Gavin Wraith)
Newsgroups: comp.sys.acorn.announce
Subject: PD Languages for RISC OS
Followup-To: comp.sys.acorn.tech
Date: 30 Nov 1994 14:26:29 -0000
Organization: Acorn Computers Ltd, Cambridge, England
Lines: 162
Sender: aglover@acorn.co.uk
Approved: aglover@acorn.co.uk (Alan Glover)
Message-ID: <3bi22l$418@acorn.acorn.co.uk>
NNTP-Posting-Host: acorn.acorn.co.uk


******** PD Languages for Risc OS ***********

On the usenet group comp.compilers there is regularly posted an
archive of PD compilers and interpreters (about 373K's worth of 
information) by D.Sharnoff and A.Robenalt. However, Acorn machines 
being almost unknown in the USA, this archive is of more interest 
to PC and Unix users. Enquiries to compilers-request@iecc.com .

Here is an incomplete list of PD programming languages available
for acorn machines, with very subjective comments (no flames please).
Most can be obtained by anonymous ftp from

    micros.hensa.ac.uk:micros/arch/riscos/<dirname>

where <dirname> is as specified below.

Imperative languages
--------------------

Charm - A Pascal like compiled language. Not portable.
        Available from some PD mail order dealers, I think.

        Personal opinion: sweet but limited.

PC    - Pascal. <dirname> = a/a122. 

        Personal opinion: No experience of it. I find Pascal
                          over-didactic and clumsy.

Icon  - Griswold, 1970's.  A descendant of SNOBOL4 with Pascal-like 
        syntax. Icon is a general-purpose language with special features 
        for string scanning.  Dynamic types.  The central theme of Icon 
        is the generator: when an expression is evaluated it may be 
        suspended and later resumed, producing a result sequence of
        values until it fails.  Resumption takes place implicitly in 
        two contexts: iteration which is syntactically loop-like 
        ('every-do'), and goal-directed evaluation in which a conditional
        expression automatically attempts to produce at least one result. 
        Expressions that fail are used in lieu of Booleans.  
        Data backtracking is supported by a reversible assignment.  
        Icon also has co-expressions, which can be explicitly resumed at 
        any time.  "The Icon Programming Language", Ralph & Marge Griswold,
        2nd ed P-H 1990. ftp://cs.arizona.edu list: icon-group@arizona.edu 

         <dirname> = a/a106

        Personal opinion: A rolling stone from the past.

GRS     <dirname> = b/b062

        Personal opinion: I could not get it to work.

Ada     <dirname> = c/c052.

        Personal opinion: No experience. Committee designed language.

GCC    <dirname> = b/b013. GNU C and C++. Portable.

        Personal opinion: Not for beginners or those with limited RAM.
                          Its availability is a very significant 
                          development, especially as the rise of
                          Linux enhances the importance of GNU
                          software.

Armbob  <dirname> = b/b178. Not portable. C-like, object oriented
        language. Supports wimp programming. Implicit typing.
        Version 2 with floating point numbers out soon. Good low
        level interface.

        Personal opinion: Just the ticket for beginners who want
        something more flexible than but as easy as Basic.

FORTH variations
----------------
Personal opinion: Some people go wild over Forth. Look at all the
articles on it in old magazines. It is not for beginners, and it
misses out on all the developments of the last 20 years. Fascinating
for implementors, a pain in the stack for users.

Forthmacs   <dirname> = c/c073
AForth      <dirname> = a/a293
TileForth   <dirname> = a/a111

Almost as weird as Forth is J (son of APL)

J           <dirname> = a/a165

            Personal opinion: Dijkstra got the size of it when he said
            that APL was a language designed to perfection - in the
            wrong direction. IBM once adopted APL - can one be ruder?

Declarative Languages
---------------------

SB-Prolog   <dirname> = a/a067

           Personal opinion: I find relations a lot clumsier than
                             functions. Fine for a database query
                             language, painful for almost anything else.

Hope       <dirname> = a/a139  Eager evaluation, but lists can have
                               lazy tails.

           Personal opinion: I believe this started out as a project
                             at Imperial College, but the code (in
                             Pascal) was so awful that they disowned it.
                             I found it a bit flaky. Hope has been
                             superceded by later languages.

SML       <dirname> = a/a216  Eager evaluation. No modules.

          Personal opinion: Fairly basic core language, using a bytecode
                            interpreter. Good choice for a beginner armed 
                            with a good text book (e.g. Wikstroem). 
                            Poor interface to low level.
                            
Gofer     <dirname> = a/a262  Lazy evaluation. Type classes.
                              The latest version has type-constructor
                              classes, and is the only language to
                              support this concept. (I can supply a 
                              version that runs in a window).

          Personal opinion: This language represents the very latest in
                            ideas about types, and it is sweet to use,
                            too. The low level interface is poor, so it
                            is hardly the language for exploiting the
                            machine, but for teaching or for symbolic
                            manipulation it is wonderful.

 
Lisp Family
-----------
Personal opinion: These tend to be unsuitable for beginners by reason 
                  of lack of good documentation or useful low-level 
                  interface. Lisp, or at least, Scheme is potentially 
                  a winner for beginners because it is simple, powerful
                  and there are lots of good text books. It has been an 
                  educational tool in the USA for years. GNU is going 
                  to adopt it as a scripting language. Down side is - 
                  no types, too many brackets, missed out on recent
                  developments in programming language design.

Xlisp            <dirname> = a/a103

XScheme          <dirname> = a/a138

Siod             <dirname> = a/a275

Xlisp+           <dirname> = b/b076

Foolslisp        <dirname> = c/c162

--------- END ---------------


        

_______________________________________________________________________________

aglover@acorn.co.uk, moderator of comp.sys.acorn.announce. Submissions to
announce-request@acorn.co.uk, other related mail to announcer@acorn.co.uk.

