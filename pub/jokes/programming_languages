From Zacharias Bobolakis <zb@doc.ic.ac.uk> Wed Oct 13 12:43:07 1993
From: Zacharias Bobolakis <zb@doc.ic.ac.uk>
Date: Wed, 13 Oct 93 11:50:53 BST
To: dbh@doc.ic.ac.uk

Xref: pcl comp.programming:5975 comp.lang.misc:12074 alt.folklore.computers:44547 rec.humor:74313
Path: pcl!doc.ic.ac.uk!agate!library.ucla.edu!news.mic.ucla.edu!unixg.ubc.ca!unixg.ubc.ca!nntp.cs.ubc.ca!vanbc.wimsey.com!news.cyberstore.ca!nwnexus!osiris
From: David Ruggiero <osiris@halcyon.com>
Newsgroups: comp.programming,comp.lang.misc,alt.folklore.computers,rec.humor
Subject: The Programmer's Handy Guide to the Languages (humor)
Supersedes: <27bj41$287@nwfocus.wa.com>
Date: 17 Sep 1993 08:17:55 -0700
Organization: [none - why fight entropy?]
Lines: 112
Sender: news@nwfocus.wa.com
Expires: 15 October 1993 01:01:01 GMT
Message-ID: <27ckf3$64v@nwfocus.wa.com>
Reply-To: osiris@halcyon.com (David Ruggiero)
NNTP-Posting-Host: nwfocus.wa.com
Keywords: humor programming languages
Originator: osiris@halcyon.com


Something that was going around the office network that I thought
needed wider distribution...I've made a few edits and additions, but
the original author or authors remain unknown. Enjoy.

{BTW, in case you think of it - I already tried (twice!) to submit
this to rec.humor.funny, and both times Maddie rejected it with nary
an explanation...<sigh> }

David Ruggiero (jdavid@halcyon.com)

------------------------------------------------------------------------

          THE PROGRAMMER'S QUICK GUIDE TO THE LANGUAGES

The proliferation of modern programming languages (all of which seem to
have stolen countless features from one another) sometimes makes it
difficult to remember what language you're currently using. This handy
reference is offered as a public service to help programmers who find
themselves in such a dilemma.


                TASK: Shoot yourself in the foot.


C: You shoot yourself in the foot.

C++: You accidentally create a dozen instances of yourself and shoot
them all in the foot. Providing emergency medical assistance is
impossible since you can't tell which are bitwise copies and which are
just pointing at others and saying, "That's me, over there."

FORTRAN: You shoot yourself in each toe, iteratively, until you run out
of toes, then you read in the next foot and repeat. If you run out of
bullets, you continue with the attempts to shoot yourself anyways because
you have no exception-handling capability.

Pascal: The compiler won't let you shoot yourself in the foot.

Ada: After correctly packing your foot, you attempt to concurrently load
the gun, pull the trigger, scream, and shoot yourself in the foot. When
you try, however, you discover you can't because your foot is of the wrong
type.

COBOL: Using a COLT 45 HANDGUN, AIM gun at LEG.FOOT, THEN place
ARM.HAND.FINGER on HANDGUN.TRIGGER and SQUEEZE. THEN return HANDGUN to
HOLSTER. CHECK whether shoelace needs to be re-tied.

LISP: You shoot yourself in the appendage which holds the gun with which
you shoot yourself in the appendage which holds the gun with which you
shoot yourself in the appendage which holds the gun with which you shoot
yourself in the appendage which holds the gun with which you shoot yourself
in the appendage which holds the gun with which you shoot yourself in
the appendage which holds...

FORTH: Foot in yourself shoot.

Prolog: You tell your program that you want to be shot in the foot. The
program figures out how to do it, but the syntax doesn't permit it to
explain it to you.

BASIC: Shoot yourself in the foot with a water pistol. On large systems,
continue until entire lower body is waterlogged.

Visual Basic: You'll really only _appear_ to have shot yourself in the
foot, but you'll have had so much fun doing it that you won't care.

HyperTalk: Put the first bullet of gun into foot left of leg of you.
Answer the result.

Motif: You spend days writing a UIL description of your foot, the bullet,
its trajectory, and the intricate scrollwork on the ivory handles of the
gun. When you finally get around to pulling the trigger, the gun jams.

APL: You shoot yourself in the foot, then spend all day figuring out how
to do it in fewer characters.

SNOBOL: If you succeed, shoot yourself in the left foot. If you fail,
shoot yourself in the right foot.

Unix:
% ls
foot.c foot.h foot.o toe.c toe.o
% rm * .o
rm:.o no such file or directory
% ls
%

Concurrent Euclid: You shoot yourself in somebody else's foot.

370 JCL: You send your foot down to MIS and include a 400-page document
explaining exactly how you want it to be shot. Three years later, your
foot comes back deep-fried.

Paradox: Not only can you shoot yourself in the foot, your users can, too.

Access: You try to point the gun at your foot, but it shoots holes in all
your Borland distribution diskettes instead.

Revelation: You're sure you're going to be able to shoot yourself
in the foot, just as soon as you figure out what all these nifty
little bullet-thingies are for.

Assembler: You try to shoot yourself in the foot, only to discover you
must first invent the gun, the bullet, the trigger, and your foot.

Modula2: After realizing that you can't actually accomplish anything in
this language, you shoot yourself in the head.

-- 
 David Ruggiero  (jdavid@halcyon.com)  Osiris Technical Services, Seattle WA 
          Le coeur a ses raisons, que la raison ne connait point.




